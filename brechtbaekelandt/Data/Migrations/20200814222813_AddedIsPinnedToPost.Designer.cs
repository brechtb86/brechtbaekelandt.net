// <auto-generated />
using brechtbaekelandt.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace brechtbaekelandt.Data.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20200814222813_AddedIsPinnedToPost")]
    partial class AddedIsPinnedToPost
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("PostId");

                    b.Property<long>("Size");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PostId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("InternalTitle");

                    b.Property<bool>("IsPinned");

                    b.Property<bool>("IsPostVisible");

                    b.Property<DateTime?>("LastModified");

                    b.Property<int>("Likes");

                    b.Property<string>("PictureUrl");

                    b.Property<bool>("SubscriberEmailSent");

                    b.Property<string>("Tags");

                    b.Property<string>("Title");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Subscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.SubscriberCategory", b =>
                {
                    b.Property<Guid>("SubscriberId");

                    b.Property<Guid>("CategoryId");

                    b.HasKey("SubscriberId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubscriberCategory");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Attachment", b =>
                {
                    b.HasOne("brechtbaekelandt.Data.Entities.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Comment", b =>
                {
                    b.HasOne("brechtbaekelandt.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.Post", b =>
                {
                    b.HasOne("brechtbaekelandt.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.PostCategory", b =>
                {
                    b.HasOne("brechtbaekelandt.Data.Entities.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("brechtbaekelandt.Data.Entities.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("brechtbaekelandt.Data.Entities.SubscriberCategory", b =>
                {
                    b.HasOne("brechtbaekelandt.Data.Entities.Category", "Category")
                        .WithMany("SubscriberCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("brechtbaekelandt.Data.Entities.Subscriber", "Subscriber")
                        .WithMany("SubscriberCategories")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
